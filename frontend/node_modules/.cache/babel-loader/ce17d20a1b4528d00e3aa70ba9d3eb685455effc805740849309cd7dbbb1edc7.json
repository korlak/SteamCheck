{"ast":null,"code":"var _jsxFileName = \"D:\\\\www\\\\PerfectRuns\\\\frontend\\\\src\\\\links\\\\getUserAchievement.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GetUserAchievement() {\n  _s();\n  const navigate = useNavigate();\n  const [steamId, setSteamId] = useState('');\n  const [gameId, setGameId] = useState('');\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!steamId || !gameId) {\n      setError('Будь ласка, введіть ID');\n      return;\n    }\n    try {\n      const response = await fetch(`/steam/userGameAchievements/${steamId}/${gameId}`, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error('Помилка при отриманні даних');\n      }\n      const postData = await response.json();\n      setData(postData);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0456\\u0442\\u044C SteamID\",\n        value: steamId,\n        onChange: event => setSteamId(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0456\\u0442\\u044C ID \\u0433\\u0440\\u0438\",\n        value: gameId,\n        onChange: event => setGameId(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\u0412\\u0456\\u0434\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(data, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(GetUserAchievement, \"jMSA5+PMTKi/+pXQjzfcXZ+alMg=\", false, function () {\n  return [useNavigate];\n});\n_c = GetUserAchievement;\nvar _c;\n$RefreshReg$(_c, \"GetUserAchievement\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","GetUserAchievement","_s","navigate","steamId","setSteamId","gameId","setGameId","data","setData","error","setError","handleSubmit","e","preventDefault","response","fetch","method","ok","Error","postData","json","err","message","className","children","onSubmit","type","placeholder","value","onChange","event","target","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["D:/www/PerfectRuns/frontend/src/links/getUserAchievement.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function GetUserAchievement() {\r\n    const navigate = useNavigate();\r\n    const [steamId, setSteamId] = useState('');\r\n    const [gameId, setGameId] = useState('');\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!steamId || !gameId) {\r\n            setError('Будь ласка, введіть ID');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`/steam/userGameAchievements/${steamId}/${gameId}`, {\r\n                method: 'GET',\r\n\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Помилка при отриманні даних');\r\n            }\r\n\r\n            const postData = await response.json();\r\n            setData(postData);\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Введіть SteamID\"\r\n                    value={steamId}\r\n                    onChange={(event) => setSteamId(event.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Введіть ID гри\"\r\n                    value={gameId}\r\n                    onChange={(event) => setGameId(event.target.value)}\r\n                />\r\n                <button type=\"submit\">Відправити</button>\r\n            </form>\r\n            {data && (\r\n                <div>\r\n                    <h2>Token</h2>\r\n                    <pre>{JSON.stringify(data, null, 2)}</pre>\r\n                    {}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}